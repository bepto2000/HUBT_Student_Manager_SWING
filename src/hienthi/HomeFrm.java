package hienthi;

import Dangnhap.Account;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import controller.DataController;
import controller.DataControllerImp;
import Class.Course;
import Class.Registering;
import Class.Student;
import Class.Subject;

public class HomeFrm extends javax.swing.JFrame implements ActionListener {
   private Account account;
    private List<Student> students;
    private List<Subject> subjects;
    private List<Registering> registerings;
    private List<Course> courses;

    private DefaultTableModel tableModelSubject;
    private DefaultTableModel tableModelStudent;
    private DefaultTableModel tableModelRegistering;
    private DefaultTableModel tableModelCourse;

    private int selectedSubjectIndex;
    private int selectedStudentIndex;
    private DataController dataController;
    private SimpleDateFormat dateFormat;

    /**
     * Creates new form HomeFrm
     */
    public HomeFrm() {
        initComponents();
        dataController = new DataControllerImp();
        setLocationRelativeTo(null);
        addActionListener();
        setTableModels();
        initListData();
        loadData();
        showSubjects();
        dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        showStudents();
        showRegisterings();
        selectedSubjectIndex = -1; // ban đầu chưa có bản ghi nào được chọn
        selectedStudentIndex = -1;
        addButtonGroup();
    }

    public HomeFrm(Account acc) {
      this();
      account =acc;
    }
  

    private void addActionListener() {
        menuItemExit.addActionListener(this);
        btnAddStudent.addActionListener(this);
        btnAddSubject.addActionListener(this);
        btnAddRegister.addActionListener(this);
        btnEditStudent.addActionListener(this);
        btnEditSubject.addActionListener(this);
        btnRemoveStudent.addActionListener(this);
        btnRemoveSubject.addActionListener(this);
        btnRemoveRegister.addActionListener(this);
        btnSearch.addActionListener(this);
        btnSearchStudent.addActionListener(this);
        btnRefreshSubject.addActionListener(this);
        btnRefreshStudentList.addActionListener(this);
        btnSearchR.addActionListener(this);
        comboSortRegistering.addActionListener(this);
        btnRefreshRegistering.addActionListener(this);
        btnCreateCourseClass.addActionListener(this);

        rbSearchByName.addActionListener(this);
        rbSearchByNumOfLesson.addActionListener(this);
        rbSortByLessonASC.addActionListener(this);
        rbSortByLessonDESC.addActionListener(this);
        rbSortByNameASC.addActionListener(this);
        rbSortByNameDESC.addActionListener(this);

        rbSortStudentByIdASC.addActionListener(this);
        rbSortStudentByNameASC.addActionListener(this);
        rbSortStudentByNameDESC.addActionListener(this);
        rbSearchStudentById.addActionListener(this);
        rbSearchStudentByMajor.addActionListener(this);
        rbSearchStudentByName.addActionListener(this);
    }

    private void addButtonGroup() {
        // Nhóm các button liên quan tính năng search môn học
        buttonGroupSearchSubject.add(rbSearchByName);
        buttonGroupSearchSubject.add(rbSearchByNumOfLesson);
        // Nhóm các button liên quan đến tính năng search sinh viên
        buttonGroupSearchStudent.add(rbSearchStudentById);
        buttonGroupSearchStudent.add(rbSearchStudentByName);
        buttonGroupSearchStudent.add(rbSearchStudentByMajor);
        // Nhóm các button liên quan tính năng sort môn học
        buttonGroupSortSubject.add(rbSortByNameASC);
        buttonGroupSortSubject.add(rbSortByNameDESC);
        buttonGroupSortSubject.add(rbSortByLessonASC);
        buttonGroupSortSubject.add(rbSortByLessonDESC);
        // Nhóm các button liên quan tính năng sort sinh viên
        buttonGroupSortStudent.add(rbSortStudentByIdASC);
        buttonGroupSortStudent.add(rbSortStudentByNameASC);
        buttonGroupSortStudent.add(rbSortStudentByNameDESC);
        // Nhóm các nút tìm kiếm liên quan bảng đăng ký
        buttonGroupSearchRegistering.add(rbSearchRByTime);
        buttonGroupSearchRegistering.add(rbSearchRBySName);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        buttonGroupSearchSubject = new javax.swing.ButtonGroup();
        buttonGroupSortSubject = new javax.swing.ButtonGroup();
        buttonGroupSearchStudent = new javax.swing.ButtonGroup();
        buttonGroupSortStudent = new javax.swing.ButtonGroup();
        buttonGroupSearchRegistering = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        rbSortByLessonDESC = new javax.swing.JRadioButton();
        rbSortByNameDESC = new javax.swing.JRadioButton();
        rbSortByNameASC = new javax.swing.JRadioButton();
        rbSortByLessonASC = new javax.swing.JRadioButton();
        rbSearchByName = new javax.swing.JRadioButton();
        rbSearchByNumOfLesson = new javax.swing.JRadioButton();
        txtSearchByName = new javax.swing.JTextField();
        txtFrom = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtTo = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSubject = new javax.swing.JTable();
        btnRemoveSubject = new javax.swing.JButton();
        btnEditSubject = new javax.swing.JButton();
        btnAddSubject = new javax.swing.JButton();
        btnRefreshSubject = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        rbSortStudentByNameASC = new javax.swing.JRadioButton();
        rbSortStudentByNameDESC = new javax.swing.JRadioButton();
        rbSortStudentByIdASC = new javax.swing.JRadioButton();
        rbSearchStudentByName = new javax.swing.JRadioButton();
        txtSearchStudentByName = new javax.swing.JTextField();
        rbSearchStudentById = new javax.swing.JRadioButton();
        rbSearchStudentByMajor = new javax.swing.JRadioButton();
        txtSearchStudentByMajor = new javax.swing.JTextField();
        txtSearchStudentById = new javax.swing.JTextField();
        btnSearchStudent = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblStudent = new javax.swing.JTable();
        btnRemoveStudent = new javax.swing.JButton();
        btnEditStudent = new javax.swing.JButton();
        btnAddStudent = new javax.swing.JButton();
        btnRefreshStudentList = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRegister = new javax.swing.JTable();
        btnAddRegister = new javax.swing.JButton();
        btnRemoveRegister = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        comboSortRegistering = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        txtSearchRToDate = new javax.swing.JTextField();
        txtSearchRBySName = new javax.swing.JTextField();
        txtSearchRFromDate = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnSearchR = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        rbSearchRByTime = new javax.swing.JRadioButton();
        rbSearchRBySName = new javax.swing.JRadioButton();
        btnRefreshRegistering = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblClassification = new javax.swing.JTable();
        btnCreateCourseClass = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuItemExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("QUẢN LÝ ĐĂNG KÝ MÔN HỌC");
        setResizable(false);

        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sắp xếp và tìm kiếm môn học", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        rbSortByLessonDESC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortByLessonDESC.setText("Số tiết giảm dần");

        rbSortByNameDESC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortByNameDESC.setText("Tên môn học z-a");

        rbSortByNameASC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortByNameASC.setText("Tên môn học a-z");

        rbSortByLessonASC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortByLessonASC.setText("Số tiết tăng dần");

        rbSearchByName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchByName.setText("Theo tên gần đúng");

        rbSearchByNumOfLesson.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchByNumOfLesson.setText("Theo số tiết học");

        txtSearchByName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtFrom.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Từ: ");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Đến: ");

        txtTo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        btnSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearch.setText("Tìm");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rbSearchByName, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(rbSearchByNumOfLesson))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(71, 71, 71)
                                        .addComponent(jLabel5)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtTo, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(txtSearchByName, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(rbSortByLessonDESC)
                                .addGap(70, 70, 70)
                                .addComponent(rbSortByLessonASC)
                                .addGap(70, 70, 70)
                                .addComponent(rbSortByNameDESC)
                                .addGap(70, 70, 70)
                                .addComponent(rbSortByNameASC)))
                        .addGap(45, 45, 45))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator2)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSortByLessonDESC)
                    .addComponent(rbSortByNameDESC)
                    .addComponent(rbSortByLessonASC)
                    .addComponent(rbSortByNameASC))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbSearchByName)
                            .addComponent(txtSearchByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(btnSearch)
                        .addGap(8, 8, 8)))
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchByNumOfLesson)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(txtFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        tblSubject.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã môn", "Tên môn", "Số tiết", "Thể loại"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblSubject);

        btnRemoveSubject.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRemoveSubject.setText("Xóa môn học");

        btnEditSubject.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnEditSubject.setText("Sửa môn học");

        btnAddSubject.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAddSubject.setText("Thêm môn học");

        btnRefreshSubject.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRefreshSubject.setText("Làm mới");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(102, Short.MAX_VALUE)
                .addComponent(btnRefreshSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90)
                .addComponent(btnAddSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90)
                .addComponent(btnEditSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90)
                .addComponent(btnRemoveSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemoveSubject)
                    .addComponent(btnEditSubject)
                    .addComponent(btnAddSubject)
                    .addComponent(btnRefreshSubject))
                .addGap(24, 24, 24))
        );

        jTabbedPane1.addTab("QUẢN LÝ MÔN HỌC", jPanel1);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sắp xếp và tìm kiếm sinh viên", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        rbSortStudentByNameASC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortStudentByNameASC.setText("Sắp theo tên tăng dần từ a-z");

        rbSortStudentByNameDESC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortStudentByNameDESC.setText("Sắp theo tên giảm dần từ z-a");

        rbSortStudentByIdASC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortStudentByIdASC.setText("Sắp theo mã sinh viên tăng dần từ a-z");

        rbSearchStudentByName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchStudentByName.setText("Tìm theo tên: ");

        txtSearchStudentByName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        rbSearchStudentById.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchStudentById.setText("Tìm theo mã sinh viên: ");

        rbSearchStudentByMajor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchStudentByMajor.setText("Tìm theo chuyên ngành: ");

        txtSearchStudentByMajor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtSearchStudentById.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        btnSearchStudent.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearchStudent.setText("Tìm kiếm");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rbSortStudentByIdASC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rbSortStudentByNameDESC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rbSortStudentByNameASC, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rbSearchStudentByName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rbSearchStudentById, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rbSearchStudentByMajor))
                .addGap(16, 16, 16)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtSearchStudentById, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE)
                    .addComponent(txtSearchStudentByName, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtSearchStudentByMajor))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSearchStudent)
                .addGap(199, 199, 199))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(rbSortStudentByNameASC)
                        .addGap(18, 18, 18)
                        .addComponent(rbSortStudentByNameDESC)
                        .addGap(18, 18, 18)
                        .addComponent(rbSortStudentByIdASC))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbSearchStudentByName)
                            .addComponent(txtSearchStudentByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbSearchStudentById)
                            .addComponent(txtSearchStudentById, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbSearchStudentByMajor)
                            .addComponent(txtSearchStudentByMajor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(btnSearchStudent)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        tblStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sinh viên", "Tên sinh viên", "Ngày sinh", "Địa chỉ", "Email", "Số điện thoại", "Lớp", "Chuyên nghành", "Niên khóa"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblStudent);

        btnRemoveStudent.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRemoveStudent.setText("Xóa sinh viên");

        btnEditStudent.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnEditStudent.setText("Sửa sinh viên");

        btnAddStudent.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAddStudent.setText("Thêm sinh viên");

        btnRefreshStudentList.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRefreshStudentList.setText("Làm mới");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 89, Short.MAX_VALUE)
                        .addComponent(btnRefreshStudentList, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(89, 89, 89)
                        .addComponent(btnAddStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(90, 90, 90)
                        .addComponent(btnEditStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(90, 90, 90)
                        .addComponent(btnRemoveStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(90, 90, 90))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemoveStudent)
                    .addComponent(btnEditStudent)
                    .addComponent(btnAddStudent)
                    .addComponent(btnRefreshStudentList))
                .addGap(23, 23, 23))
        );

        jTabbedPane1.addTab("QUẢN LÝ SINH VIÊN", jPanel2);

        tblRegister.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sinh viên", "Tên sinh viên", "Lớp", "Mã môn", "Tên môn", "Thời gian đăng ký"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblRegister);

        btnAddRegister.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAddRegister.setText("Thêm đăng ký");

        btnRemoveRegister.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRemoveRegister.setText("Xóa đăng ký");

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sắp xếp và tìm kiếm bảng đăng ký", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Sắp xếp bảng đăng ký theo: ");

        comboSortRegistering.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        comboSortRegistering.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tên tăng dần a-z", "Tên giảm dần z-a", "Thời gian đăng ký sớm-muộn", "Thời gian đăng ký muộn-sớm" }));

        txtSearchRToDate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtSearchRBySName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtSearchRFromDate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Từ ngày: ");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Đến ngày: ");

        btnSearchR.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearchR.setText("Tìm kiếm");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Nhập tên sinh viên: ");

        rbSearchRByTime.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchRByTime.setText("Tìm kiếm theo thời gian đăng ký: ");

        rbSearchRBySName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchRBySName.setText("Tìm kiếm theo tên sinh viên: ");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(comboSortRegistering, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbSearchRByTime)
                            .addComponent(rbSearchRBySName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSearchRToDate, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                            .addComponent(txtSearchRFromDate, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtSearchRBySName, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(51, 51, 51)
                        .addComponent(btnSearchR, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comboSortRegistering, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchRBySName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(rbSearchRBySName))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchRFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(btnSearchR)
                    .addComponent(rbSearchRByTime))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtSearchRToDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        btnRefreshRegistering.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRefreshRegistering.setText("Làm mới");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addComponent(btnRefreshRegistering, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(148, 148, 148)
                .addComponent(btnAddRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(148, 148, 148)
                .addComponent(btnRemoveRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemoveRegister)
                    .addComponent(btnAddRegister)
                    .addComponent(btnRefreshRegistering))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("QUẢN LÝ ĐĂNG KÝ", jPanel3);

        tblClassification.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lớp học phần", "Mã sinh viên", "Tên sinh viên", "Lớp sinh viên", "Mã môn", "Tên môn", "Thời gian đăng ký"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tblClassification);

        btnCreateCourseClass.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnCreateCourseClass.setText("Lập danh sách lớp");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1022, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(417, 417, 417)
                .addComponent(btnCreateCourseClass, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCreateCourseClass)
                .addGap(21, 21, 21)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("LẬP DANH SÁCH LỚP", jPanel4);

        jMenu1.setText("File");

        menuItemExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_DOWN_MASK));
        menuItemExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/braniumacademy/images/turn-off-24px.png"))); // NOI18N
        menuItemExit.setText("Thoát");
        jMenu1.add(menuItemExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomeFrm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddRegister;
    private javax.swing.JButton btnAddStudent;
    private javax.swing.JButton btnAddSubject;
    private javax.swing.JButton btnCreateCourseClass;
    private javax.swing.JButton btnEditStudent;
    private javax.swing.JButton btnEditSubject;
    private javax.swing.JButton btnRefreshRegistering;
    private javax.swing.JButton btnRefreshStudentList;
    private javax.swing.JButton btnRefreshSubject;
    private javax.swing.JButton btnRemoveRegister;
    private javax.swing.JButton btnRemoveStudent;
    private javax.swing.JButton btnRemoveSubject;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSearchR;
    private javax.swing.JButton btnSearchStudent;
    private javax.swing.ButtonGroup buttonGroupSearchRegistering;
    private javax.swing.ButtonGroup buttonGroupSearchStudent;
    private javax.swing.ButtonGroup buttonGroupSearchSubject;
    private javax.swing.ButtonGroup buttonGroupSortStudent;
    private javax.swing.ButtonGroup buttonGroupSortSubject;
    private javax.swing.JComboBox<String> comboSortRegistering;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenuItem menuItemExit;
    private javax.swing.JRadioButton rbSearchByName;
    private javax.swing.JRadioButton rbSearchByNumOfLesson;
    private javax.swing.JRadioButton rbSearchRBySName;
    private javax.swing.JRadioButton rbSearchRByTime;
    private javax.swing.JRadioButton rbSearchStudentById;
    private javax.swing.JRadioButton rbSearchStudentByMajor;
    private javax.swing.JRadioButton rbSearchStudentByName;
    private javax.swing.JRadioButton rbSortByLessonASC;
    private javax.swing.JRadioButton rbSortByLessonDESC;
    private javax.swing.JRadioButton rbSortByNameASC;
    private javax.swing.JRadioButton rbSortByNameDESC;
    private javax.swing.JRadioButton rbSortStudentByIdASC;
    private javax.swing.JRadioButton rbSortStudentByNameASC;
    private javax.swing.JRadioButton rbSortStudentByNameDESC;
    private javax.swing.JTable tblClassification;
    private javax.swing.JTable tblRegister;
    private javax.swing.JTable tblStudent;
    private javax.swing.JTable tblSubject;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtSearchByName;
    private javax.swing.JTextField txtSearchRBySName;
    private javax.swing.JTextField txtSearchRFromDate;
    private javax.swing.JTextField txtSearchRToDate;
    private javax.swing.JTextField txtSearchStudentById;
    private javax.swing.JTextField txtSearchStudentByMajor;
    private javax.swing.JTextField txtSearchStudentByName;
    private javax.swing.JTextField txtTo;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        var obj = e.getSource();
        if (obj.equals(menuItemExit)) {
            dispose();
        } else if (obj.equals(btnAddSubject)) {
            var addSubjectFrm = new AddSubjectFrm(this, true);
            addSubjectFrm.setVisible(true);
        } else if (obj.equals(btnEditSubject)) {
            editSubject();
        } else if (obj.equals(btnEditStudent)) {
            editStudent();
        } else if (obj.equals(btnRemoveSubject)) {
            removeSubject();
        } else if (obj.equals(btnRemoveStudent)) {
            removeStudent();
        } else if (obj.equals(btnAddStudent)) {
            var addStudentFrm = new AddStudentFrm(this, true, students);
            addStudentFrm.setVisible(true);
        } else if (obj.equals(btnSearch)) {
            searchSubject();
        } else if (obj.equals(btnSearchStudent)) {
            searchStudent();
        } else if (obj.equals(rbSortByLessonASC)
                || obj.equals(rbSortByLessonDESC)
                || obj.equals(rbSortByNameASC)
                || obj.equals(rbSortByNameDESC)) {
            sortSubjects(obj);
        } else if (obj.equals(btnRefreshSubject)) {
            refreshSubjects();
        } else if (obj.equals(rbSortStudentByIdASC)
                || obj.equals(rbSortStudentByNameASC)
                || obj.equals(rbSortStudentByNameDESC)) {
            sortStudents(obj);
        } else if (obj.equals(rbSearchStudentById)
                || obj.equals(rbSearchStudentByMajor)
                || obj.equals(rbSearchStudentByName)) {
            checkSearchStudentTextField();
        } else if (btnRefreshStudentList.equals(obj)) {
            refreshStudents();
        } else if (obj.equals(btnAddRegister)) {
            addNewRegistering();
        } else if (obj.equals(btnRemoveRegister)) {
            removeRegistering();
        } else if (obj.equals(comboSortRegistering)) {
            sortRegistering();
        } else if (obj.equals(btnSearchR)) {
            searchRegistering();
        } else if (obj.equals(btnRefreshRegistering)) {
            refreshRegistering();
        } else if (obj.equals(btnRemoveRegister)) {
            removeRegistering();
        } else if (obj.equals(btnCreateCourseClass)) {
            createStudentClass();
        }
    }

    public void addNewSubjectCallback(Subject s) {
        subjects.add(s);
        showASubject(s);
        writeDataToFile(1);
    }

    public void addNewStudentCallback(Student s) {
        students.add(s);
        showAStudent(s);
        writeDataToFile(2);
    }

    public void addRegisteringCallback(Registering r) {
        registerings.add(r);
        showRegistering(r);
        writeDataToFile(3);
    }

    public void editSubjectCallback(Subject e) {
        tableModelSubject.removeRow(selectedSubjectIndex);
        var row = new Object[]{
            e.getId(), e.getName(), e.getNumOfLesson(), e.getKind()
        };
        // chèn dòng mới vào chỗ phần tử đã xóa đi, ok?
        tableModelSubject.insertRow(selectedSubjectIndex, row);
        subjects.set(selectedSubjectIndex, e);
        writeDataToFile(1);
        selectedSubjectIndex = -1; // reset vị trí phần tử được chọn
    }

    public void editStudentCallback(Student e) {
        tableModelStudent.removeRow(selectedStudentIndex);
        var row = new Object[]{
            e.getStudentId(), e.getFullName(), dateFormat.format(e.getDob()),
            e.getAddress(), e.getEmail(), e.getPhoneNumber(),
            e.getStudentClass(), e.getMajor(), e.getAcademicYear()
        };
        // chèn dòng mới vào chỗ phần tử đã xóa đi, ok?
        tableModelStudent.insertRow(selectedStudentIndex, row);
        students.set(selectedStudentIndex, e);
        writeDataToFile(2);
        selectedStudentIndex = -1; // reset vị trí phần tử được chọn
    }

    private void setTableModels() {
        tableModelRegistering = (DefaultTableModel) tblRegister.getModel();
        tableModelStudent = (DefaultTableModel) tblStudent.getModel();
        tableModelSubject = (DefaultTableModel) tblSubject.getModel();
        tableModelCourse = (DefaultTableModel) tblClassification.getModel();
    }

    private void showSubjects() {
        for (var e : subjects) {
            showASubject(e);
        }
    }

    private void showSubjects(List<Subject> data) {
        for (var e : data) {
            showASubject(e);
        }
    }

    private void showStudents() {
        for (var e : students) {
            showAStudent(e);
        }
    }

    private void showStudents(List<Student> data) {
        for (var e : data) {
            showAStudent(e);
        }
    }

    private void loadData() {
        List<Subject> listSubject
                = dataController.<Subject>readDataFromFile(
                        DataController.SUBJECT_FILE);
        List<Student> listStudent
                = dataController.<Student>readDataFromFile(
                        DataController.STUDENT_FILE);
        List<Registering> listRegisterings
                = dataController.<Registering>readDataFromFile(
                        DataController.REGISTERING_FILE);
        if (listSubject != null) {
            subjects.addAll(listSubject);
        }
        if (listStudent != null) {
            students.addAll(listStudent);
        }
        if (listRegisterings != null) {
            registerings.addAll(listRegisterings);
        }
        // cập nhật id mới để đảm bảo không trùng nhau
        dataController.updateSubjectId(subjects);
    }

    private void writeDataToFile(int which) {
        switch (which) {
            case DataController.SUBJECT:
                dataController.writeToFile(subjects,
                        DataController.SUBJECT_FILE);
                break;
            case DataController.STUDENT:
                dataController.writeToFile(students,
                        DataController.STUDENT_FILE);
                break;
            case DataController.REGISTERING:
                dataController.writeToFile(registerings,
                        DataController.REGISTERING_FILE);
                break;
            default:
                System.out.println("Invalid choice!");
        }
    }

    private void initListData() {
        subjects = new ArrayList<>();
        students = new ArrayList<>();
        registerings = new ArrayList<>();
    }

    private void showAStudent(Student e) {
        var row = new Object[]{
            e.getStudentId(), e.getFullName(), dateFormat.format(e.getDob()),
            e.getAddress(), e.getEmail(), e.getPhoneNumber(),
            e.getStudentClass(), e.getMajor(), e.getAcademicYear()
        };
        tableModelStudent.addRow(row);
    }

    private void showASubject(Subject e) {
        var row = new Object[]{
            e.getId(), e.getName(), e.getNumOfLesson(), e.getKind()
        };
        tableModelSubject.addRow(row);
    }

    private void removeSubject() {
        var index = tblSubject.getSelectedRow();
        if (index >= 0) {
            int retValue = JOptionPane.showConfirmDialog(rootPane,
                    "Bạn có chắc muốn xóa bản ghi này không?");
            if (retValue == JOptionPane.YES_OPTION) {
                tableModelSubject.removeRow(index);
                subjects.remove(index);
                tableModelSubject.fireTableDataChanged();
                dataController.writeToFile(subjects,
                        DataController.SUBJECT_FILE);
            }
        } else {
            var msg = "Vui lòng chọn một bản ghi để xóa!";
            showMessage(msg);
        }
    }

    private void editSubject() {
        // hàng hiện tại trên view của bảng
        selectedSubjectIndex = tblSubject.getSelectedRow();
        if (selectedSubjectIndex >= 0) {
            Subject selectedSubject = subjects.get(selectedSubjectIndex);
            var editSubjectFrm
                    = new EditSubjectFrm(this, true, selectedSubject);
            editSubjectFrm.setVisible(true);
        } else {
            var msg = "Vui lòng chọn một bản ghi để sửa!";
            showMessage(msg);
        }
    }

    private void editStudent() {
        // hàng hiện tại trên view của bảng
        selectedStudentIndex = tblStudent.getSelectedRow();
        if (selectedStudentIndex >= 0) {
            Student selectedStudent = students.get(selectedStudentIndex);
            var editStudentFrm
                    = new EditStudentFrm(this, true, selectedStudent);
            editStudentFrm.setVisible(true);
        } else {
            var msg = "Vui lòng chọn một bản ghi để sửa!";
            showMessage(msg);
        }
    }

    private void sortSubjects(Object obj) {
        tableModelSubject.setRowCount(0); // reset all data in table model
        if (obj.equals(rbSortByLessonASC)) {
            if (rbSortByLessonASC.isSelected()) {
                dataController.sortSubjectByNumOfLessonASC(subjects);
                showSubjects(subjects);
            }
        } else if (obj.equals(rbSortByLessonDESC)) {
            if (rbSortByLessonDESC.isSelected()) {
                dataController.sortSubjectByNumOfLessonDESC(subjects);
                showSubjects(subjects);
            }
        } else if (obj.equals(rbSortByNameASC)) {
            if (rbSortByNameASC.isSelected()) {
                dataController.sortSubjectByNameASC(subjects);
                showSubjects(subjects);
            }
        } else if (obj.equals(rbSortByNameDESC)) {
            if (rbSortByNameDESC.isSelected()) {
                dataController.sortSubjectByNameDESC(subjects);
                showSubjects(subjects);
            }
        }
    }

    private void searchSubject() {
        reloadSubjects();
        List<Subject> copySubjets = new ArrayList<>(subjects);
        if (rbSearchByName.isSelected()) {
            var key = txtSearchByName.getText();
            if (key.isEmpty()) {
                var msg = "Vui lòng điền tên môn học cần tìm!";
                showMessage(msg);
            } else {
                subjects.clear();
                subjects.addAll(dataController
                        .searchSubjectByName(copySubjets, key));
                showSearchSubjectResult(subjects);
                if (subjects.size() > 0) {
                    var msg = "Tìm thấy " + subjects.size() + " kết quả.";
                    showMessage(msg);
                } else {
                    showResultNotFound();
                }
            }
        } else if (rbSearchByNumOfLesson.isSelected()) {
            var fromValue = txtFrom.getText();
            var toValue = txtTo.getText();
            if (fromValue.isEmpty() && toValue.isEmpty()) {
                var msg = "Vui lòng điền đầy đủ khoảng giá trị "
                        + "của số tiết học để tìm kiếm!";
                showMessage(msg);
            } else if (fromValue.isEmpty()) {
                int fromLesson = -1;
                int toLesson = Integer.parseInt(toValue);
                subjects.clear();
                subjects.addAll(dataController.searchSubjectByNumOfLesson(
                        copySubjets, fromLesson, toLesson));
                showSearchSubjectResult(subjects);
                if (subjects.size() > 0) {
                    var msg = "Tìm thấy " + subjects.size() + " kết quả.";
                    showMessage(msg);
                } else {
                    showResultNotFound();
                }
            } else if (toValue.isEmpty()) {
                int fromLesson = Integer.parseInt(fromValue);
                int toLesson = -1;
                subjects.clear();
                subjects.addAll(dataController
                        .searchSubjectByNumOfLesson(copySubjets,
                                fromLesson, toLesson));
                showSearchSubjectResult(subjects);
                if (subjects.size() > 0) {
                    var msg = "Tìm thấy " + subjects.size() + " kết quả.";
                    showMessage(msg);
                } else {
                    showResultNotFound();
                }
            } else {
                int fromLesson = Integer.parseInt(fromValue);
                int toLesson = Integer.parseInt(toValue);
                subjects.clear();
                subjects.addAll(dataController
                        .searchSubjectByNumOfLesson(copySubjets,
                                fromLesson, toLesson));
                showSearchSubjectResult(subjects);
                if (subjects.size() > 0) {
                    var msg = "Tìm thấy " + subjects.size() + " kết quả.";
                    showMessage(msg);
                } else {
                    showResultNotFound();
                }
            }
        } else {
            var msg = "Hãy chọn mục tìm kiếm trước khi thực hiện hành động này!";
            showMessage(msg);
        }
    }

    private void refreshSubjects() {
        // xóa lựa chọn trước đó ở hai group
        buttonGroupSearchSubject.clearSelection();
        buttonGroupSortSubject.clearSelection();
        txtSearchByName.setText("");
        txtFrom.setText("");
        txtTo.setText("");
        reloadSubjects();
        tableModelSubject.setRowCount(0);
        showSubjects();
    }

    private void showSearchSubjectResult(List<Subject> searchResult) {
        tableModelSubject.setRowCount(0);
        for (var s : searchResult) {
            showASubject(s);
        }
    }

    public void searchStudent() {
        reloadStudents();
        List<Student> copyStudents = new ArrayList<>(students);
        if (rbSearchStudentById.isSelected()) {
            var key = txtSearchStudentById.getText();
            if (key.isEmpty()) {
                var msg = "Vui lòng điền mã sinh viên cần tìm!";
                showMessage(msg);
            } else {
                students.clear();
                students.addAll(dataController
                        .searchStudentById(copyStudents, key));
                showSearchStudentResult(students);
                if (students.size() > 0) {
                    var msg = "Tìm thấy " + students.size() + " kết quả.";
                    showMessage(msg);
                } else {
                    showResultNotFound();
                }
            }
        } else if (rbSearchStudentByMajor.isSelected()) {
            var key = txtSearchStudentByMajor.getText();
            if (key.isEmpty()) {
                var msg = "Vui lòng điền chuyên ngành sinh viên cần tìm!";
                showMessage(msg);
            } else {
                students.clear();
                students.addAll(dataController
                        .searchStudentByMajor(copyStudents, key));
                showSearchStudentResult(students);
                if (students.size() > 0) {
                    var msg = "Tìm thấy " + students.size() + " kết quả.";
                    showMessage(msg);
                } else {
                    showResultNotFound();
                }
            }
        } else if (rbSearchStudentByName.isSelected()) {
            var key = txtSearchStudentByName.getText();
            if (key.isEmpty()) {
                var msg = "Vui lòng điền tên sinh viên cần tìm!";
                showMessage(msg);
            } else {
                students.clear();
                students.addAll(dataController
                        .searchStudentByName(copyStudents, key));
                showSearchStudentResult(students);
                if (students.size() > 0) {
                    var msg = "Tìm thấy " + students.size() + " kết quả.";
                    showMessage(msg);
                } else {
                    showResultNotFound();
                }
            }
        } else {
            var msg = "Hãy chọn tiêu chí và điền giá trị "
                    + "trước khi click vào tìm kiếm!";
            showMessage(msg);
        }
    }

    private void checkSearchStudentTextField() {
        if (rbSearchStudentByName.isSelected()) {
            txtSearchStudentById.setEnabled(false);
            txtSearchStudentByMajor.setEnabled(false);
            txtSearchStudentByName.setEnabled(true);
        }
        if (rbSearchStudentByMajor.isSelected()) {
            txtSearchStudentById.setEnabled(false);
            txtSearchStudentByMajor.setEnabled(true);
            txtSearchStudentByName.setEnabled(false);
        }
        if (rbSearchStudentById.isSelected()) {
            txtSearchStudentById.setEnabled(true);
            txtSearchStudentByMajor.setEnabled(false);
            txtSearchStudentByName.setEnabled(false);
        }
    }

    private void showSearchStudentResult(List<Student> searchResult) {
        tableModelStudent.setRowCount(0);
        for (var s : searchResult) {
            showAStudent(s);
        }
    }

    private void showResultNotFound() {
        var msg = "Không tìm thấy kết quả!";
        showMessage(msg);
    }

    private void removeStudent() {
        var index = tblStudent.getSelectedRow();
        if (index >= 0) {
            int retValue = JOptionPane.showConfirmDialog(rootPane,
                    "Bạn có chắc muốn xóa bản ghi này không?");
            if (retValue == JOptionPane.YES_OPTION) {
                tableModelStudent.removeRow(index);
                students.remove(index);
                tableModelStudent.fireTableDataChanged();
                dataController.writeToFile(students,
                        DataController.STUDENT_FILE);
            }
        } else {
            var msg = "Vui lòng chọn một bản ghi để xóa!";
            showMessage(msg);
        }
    }

    private void showMessage(String msg) {
        JOptionPane.showMessageDialog(rootPane, msg);
    }

    private void sortStudents(Object obj) {
        tableModelStudent.setRowCount(0); // reset all data in table model
        if (obj.equals(rbSortStudentByIdASC)) {
            if (rbSortStudentByIdASC.isSelected()) {
                dataController.sortStudentByIdASC(students);
                showStudents(students);
            }
        } else if (obj.equals(rbSortStudentByNameASC)) {
            if (rbSortStudentByNameASC.isSelected()) {
                dataController.sortStudentByNameASC(students);
                showStudents(students);
            }
        } else if (obj.equals(rbSortStudentByNameDESC)) {
            if (rbSortStudentByNameDESC.isSelected()) {
                dataController.sortStudentByNameDESC(students);
                showStudents(students);
            }
        }
    }

    private void refreshStudents() {
        buttonGroupSortStudent.clearSelection();
        buttonGroupSearchStudent.clearSelection();
        txtSearchStudentById.setEnabled(true);
        txtSearchStudentByMajor.setEnabled(true);
        txtSearchStudentByName.setEnabled(true);
        txtSearchStudentById.setText("");
        txtSearchStudentByMajor.setText("");
        txtSearchStudentByName.setText("");
        tableModelStudent.setRowCount(0);
        reloadStudents();
        showStudents();
    }

    private void showRegistering(Registering r) {
        var format = "dd/MM/yyyy HH:mm:ss";
        var dateFormat = new SimpleDateFormat(format);
        var row = new Object[]{
            r.getStudent().getStudentId(), r.getStudent().getFullName(),
            r.getStudent().getStudentClass(), r.getSubject().getId(),
            r.getSubject().getName(), dateFormat.format(r.getRegistedTime())
        };
        tableModelRegistering.addRow(row);
    }

    private void showRegisterings() {
        tableModelRegistering.setRowCount(0); // xóa hết dữ liệu trong bảng cũ
        for (var r : registerings) {
            showRegistering(r);
        }
    }

    private void addNewRegistering() {
        var registeringFrm = new AddRegisteringFrm(this,
                rootPaneCheckingEnabled, students, subjects, registerings);
        registeringFrm.setVisible(true);
    }

    private void removeRegistering() {
        var index = tblRegister.getSelectedRow();
        if (index > -1) {
            int retValue = JOptionPane.showConfirmDialog(rootPane,
                    "Bạn có chắc muốn xóa bản ghi này không?");
            if (retValue == JOptionPane.YES_OPTION) {
                tableModelRegistering.removeRow(index);
                registerings.remove(index);
                tableModelRegistering.fireTableDataChanged();
                dataController.writeToFile(registerings,
                        DataController.REGISTERING_FILE);
            }
        } else {
            var msg = "Vui lòng chọn một bản ghi để xóa!";
            showMessage(msg);
        }
    }

    private void sortRegistering() {
        var optionIndex = comboSortRegistering.getSelectedIndex();
        switch (optionIndex) {
            case 0:
                dataController.sortRegisteringByStudentNameAZ(registerings);
                showRegisterings();
                break;
            case 1:
                dataController.sortRegisteringByStudentNameZA(registerings);
                showRegisterings();
                break;
            case 2:
                dataController.sortRegisteringByRegisterTimeEL(registerings);
                showRegisterings();
                break;
            case 3:
                dataController.sortRegisteringByRegisterTimeLE(registerings);
                showRegisterings();
                break;
        }
    }

    private void searchRegistering() {
        reloadRegisterings();
        List<Registering> copList = new ArrayList<>(registerings);
        if (rbSearchRBySName.isSelected()) {
            var name = txtSearchRBySName.getText().trim();
            if (name.isEmpty()) {
                var msg = "Vui lòng nhập tên sinh viên cần tìm!";
                showMessage(msg);
            } else {
                registerings.clear();
                registerings.addAll(dataController
                        .searchRegisteringByStudentName(copList, name));
                showRegisterings();
                var msg = "Tìm thấy " + registerings.size() + " kết quả.";
                showMessage(msg);
            }
        } else if (rbSearchRByTime.isSelected()) {
            var from = txtSearchRFromDate.getText().trim();
            var to = txtSearchRToDate.getText().trim();
            if (from.isEmpty() || to.isEmpty()) {
                var msg = "Vui lòng nhập ngày đăng ký cần tìm.";
                showMessage(msg);
            } else {
                var format = "dd/MM/yyyy";
                var dateFormat = new SimpleDateFormat(format);
                try {
                    Date fromDate = dateFormat.parse(from);
                    Date toDate = dateFormat.parse(to);
                    registerings.clear();
                    registerings.addAll(dataController
                            .searchRegisteringByRegisterTime(
                                    copList, fromDate, toDate));
                    showRegisterings();
                    var msg = "Tìm thấy " + registerings.size() + " kết quả.";
                    showMessage(msg);
                } catch (ParseException ex) {
                    var msg = "Vui lòng nhập đúng định dạng dd/MM/yyyy."
                            + "\nVí dụ: 25/12/2023";
                    showMessage(msg);
                }
            }
        } else {
            var msg = "Vui lòng chọn phương thức tìm kiếm trước!";
            showMessage(msg);
        }
    }

    private void reloadRegisterings() {
        registerings.clear();
        registerings.addAll(
                dataController.<Registering>readDataFromFile(
                        DataController.REGISTERING_FILE));
    }

    private void reloadStudents() {
        students.clear();
        students.addAll(
                dataController.<Student>readDataFromFile(
                        DataController.STUDENT_FILE));
    }

    private void reloadSubjects() {
        subjects.clear();
        subjects.addAll(
                dataController.<Subject>readDataFromFile(
                        DataController.SUBJECT_FILE));
    }

    private void refreshRegistering() {
        buttonGroupSearchRegistering.clearSelection();
        txtSearchRBySName.setText("");
        txtSearchRFromDate.setText("");
        txtSearchRToDate.setText("");
        comboSortRegistering.setSelectedIndex(0);
        reloadRegisterings();
        showRegisterings();
    }

    private void createStudentClass() {
        // sắp xếp danh sách theo thứ tự đăng ký trước khi thực hiện
        // phân lớp học phần
        dataController.sortRegisteringByRegisterTimeEL(registerings);
        courses = new ArrayList<>(
                dataController.createCouse(registerings, subjects));
        showCours();
    }

    private void showCours() {
        var emptyString = "_";
        tableModelCourse.setRowCount(0);
        var format = "dd/MM/yyyy HH:mm:ss";
        var dateFormat = new SimpleDateFormat(format);
        for (var couse : courses) {
            for (var r : couse.getRegisterings()) {
                var row = new Object[]{
                    couse.getName(), r.getStudent().getStudentId(), 
                    r.getStudent().getFullName(), r.getStudent().getStudentClass(), 
                    r.getSubject().getId() + "", r.getSubject().getName(),
                    dateFormat.format(r.getRegistedTime())
                };
                tableModelCourse.addRow(row);
            }
            // thêm 1 dòng trống vào để phân tách cho dễ nhận diện
            var row = new Object[]{emptyString, emptyString, emptyString,
                emptyString, emptyString, emptyString, emptyString};
            tableModelCourse.addRow(row);
        }
    }
}
